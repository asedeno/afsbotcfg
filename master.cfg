# -*- python -*-
# ex: set filetype=python:

import os
import configparser
import datetime
from buildbot.plugins import changes
from buildbot.plugins import reporters
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker

from forcegerritbuild import ForceGerritBuild

BuildmasterConfig = c = {}

####### REPOSITORY INFO

REPO = 'https://gerrit.openafs.org/openafs'
BRANCHES = ['master', 'openafs-stable-1_8_x', 'openafs-stable-1_6_x']

####### LOCAL SETTINGS

settings_ini = os.path.expanduser(os.path.join(basedir, 'settings.ini'))
settings = configparser.ConfigParser()
settings.read([settings_ini])

####### FEATURES

c['buildbotNetUsageData'] = None # Disable phone-home feature.

####### WORKERS

c['protocols'] = {'pb': {'port': 9989}}

worker_config = {
    'linux-rc-x86_64': dict(max_builds=1),
    'win7-amd64': dict(max_builds=2),
}

c['workers'] = []
for name,password in settings.items('workers'):
    kwargs = worker_config.get(name, {})
    c['workers'].append(worker.Worker(name, password, **kwargs))

####### CHANGESOURCES

c['change_source'] = [
    changes.GerritChangeSource(
        gerritserver='gerrit.openafs.org',
        gerritport=29418,
        username='buildbot',
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        debug=False,
    ),
]

####### BUILD FACTORIES

def scheduler_is_gerrit(step):
    return step.getProperty('scheduler').startswith('gerrit')

class Make(util.BuildFactory):
    def __init__(self, checking=None, debug=None, kmod=None, sysname=None,
                 transarc=None, pam=None, with_=None, cf=None, make=None):
        util.BuildFactory.__init__(self)
        timeout = 3600
        sleep = 120

        self.addStep(steps.ShellCommand(
            name='sleep', command=['sleep', sleep], doStepIf=scheduler_is_gerrit))

        self.addStep(steps.Gerrit(
            repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=timeout))

        self.addStep(steps.ShellCommand(
            name='git show', command=['git', 'log', '-n', '1', '--stat']))

        self.addStep(steps.ShellCommand(
            name='git gc', command=['git', 'gc', '--auto']))

        self.addStep(steps.ShellCommand(
            name='regen.sh', command=['/bin/sh', 'regen.sh']))

        if cf is None:
            cf = ['--enable-supergroups', '--enable-namei-fileserver', '--enable-pthreaded-ubik']
        if checking is not None:
            if checking:
                cf.append('--enable-checking')
            else:
                cf.append('--disable-checking')
        if debug is not None:
            if debug:
                cf.extend(['--enable-debug', '--enable-debug-kernel'])
            else:
                cf.extend(['--disable-debug', '--disable-debug-kernel'])
        if transarc is not None:
            if transarc:
                cf.append('--enable-transarc-paths')
            else:
                cf.append('--disable-transarc-paths')
        if pam is not None:
            if pam:
                cf.append('--enable-pam')
            else:
                cf.append('--disable-pam')
        if kmod is not None:
            if kmod:
                cf.append('--enable-kernel-module')
            else:
                cf.append('--disable-kernel-module')
        if sysname:
            cf.append('--with-afs-sysname=%s' % (sysname,))
        if with_ is not None:
            for n,v in with_:
                cf.append('--with-%s=%s' % (n,v))

        self.addStep(
            steps.Configure(
                command=['./configure'] + cf,
                logfiles={'config.log': 'config.log'}))

        if make is None:
            make = ['make', '-j', '4', 'all']
        self.addStep(steps.Compile(command=make))

class VirtRunBuild(util.BuildFactory):
    def __init__(self, linux='rc', test=True):
        util.BuildFactory.__init__(self)
        build = [
            'virt-run-build.sh',
            '--branch', util.Property('branch', default='master'),
            '--linux', linux,
        ]
        if test:
            build.append('--smoke-test')
        self.addStep(steps.ShellCommand(name='virt-run-build', command=build))

class WinBuild(util.BuildFactory):
    def __init__(self, arch, variant):
        util.BuildFactory.__init__(self)
        timeout = 3600
        sleep = 120

        self.addStep(steps.ShellCommand(
            name='sleep', command=['ping', '-n', sleep, 'localhost'], doStepIf=scheduler_is_gerrit))

        self.addStep(steps.Gerrit(
            repourl=REPO, mode='full', method='fresh', retryFetch=True, timeout=timeout))

        self.addStep(steps.ShellCommand(
            name='git show', command=['git', 'log', '-n', '1', '--stat']))

        self.addStep(steps.ShellCommand(
            name='git gc', command=['git', 'gc', '--auto']))

        self.addStep(steps.ShellCommand(
            name='build-openafs', command=['build-openafs.cmd', arch, variant]))


####### BUILDERS

c['builders'] = []
_builders = {} # for schedulers

def verify_branches(branches):
    if not branches:
        branches = []
    elif branches is True:
        branches = BRANCHES
    elif isinstance(branches, str):
        branches = [branches]
    for branch in branches:
        if not branch in BRANCHES:
            raise ValueError('Unknown branch name: %s' % branch)
    return branches

def add_builder(name, factory=None, worker=None, workers=None,
                gerrit=None, nightly=None, **kwargs):
    if name is None:
        raise ValueError('builder requires a name')
    if name in _builders:
        raise ValueError('builder "%s" already defined' % (name))
    if factory is None:
        factory = Make()
    if worker is None:
        worker = name # default to the builder name
    if workers is None:
        workers = [worker] # default is one worker
    gerrit = verify_branches(gerrit)
    nightly = verify_branches(nightly)

    # Warn about workers missing in the settings file.
    # Allow the configuration to load without them, which
    # is helpful for testing.
    workernames = set(settings.options('workers'))
    missing = list(set(workers) - workernames)
    available = list(set(workers) & workernames)
    if missing:
        for m in missing:
            print('WARNING: Worker "%s" is missing in settings.ini' % m)
    if not available:
        print('WARNING: No workers for builder "%s"' % name)
        return

    # Save branch and worker names for adding schedulers below.
    _builders[name] = dict(workers=workers, gerrit=gerrit, nightly=nightly)

    c['builders'].append(util.BuilderConfig(
        name=name,
        workernames=workers,
        factory=factory,
        canStartBuild=util.enforceChosenWorker, # for force build
        **kwargs)
    )

# Environments
env_irix = {'CC': 'cc'}
env_suse = {'CFLAGS': '-Wno-error=format-truncation'}
env_fedora = {
    'CFLAGS': ' '.join([
        '-Wno-error=format-truncation',
        '-Wno-error=format-overflow',
        '-Wno-error=restrict',
        '-Wno-error=array-bounds',
        '-Wno-error=implicit-function-declaration',
    ]),
}
env_macos = {
    'ARCHFLAGS': '-arch x86_64',
    'LD_LIBRARY_PATH': '/opt/local/lib',
    'PATH': ':'.join([
        '/usr/local/git/bin',
        '/usr/bin:/bin',
        '/usr/sbin:/sbin',
        '/usr/local/bin',
        '/opt/X11/bin',
        '/opt/local/bin',
        '/opt/local/sbin',
    ]),
}

add_builder('centos7-arm64',   gerrit=False, nightly=True)
add_builder('centos73-x86_64', gerrit=True,  nightly=True)
add_builder('debian8-amd64',   gerrit=False, nightly=True)
add_builder('debian8-i386',    gerrit=False, nightly=True)
add_builder('debian87-x86_64', gerrit=False, nightly=True)
add_builder('debian9-amd64',   gerrit=True,  nightly=True, factory=Make(checking=True))
add_builder('fedora20-x86_64', gerrit=False, nightly=['master'])
add_builder('fedora21-x86_64', gerrit=False, nightly=['master'])
add_builder('fedora22-x86_64', gerrit=False, nightly=['master'], factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora23-x86_64', gerrit=False, nightly=['master'], factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora24-x86_64', gerrit=False, nightly=['master'], factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora25-x86_64', gerrit=False, nightly=['master'], factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora26-x86_64', gerrit=True,  nightly=True,       factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora27-x86_64', gerrit=True,  nightly=True,       factory=Make(kmod=False, sysname='amd64_linux26'))
add_builder('fedora28-x86_64', gerrit=False, nightly=True, factory=Make(checking=True))
add_builder('fedora29-x86_64', gerrit=False, nightly=True, env=env_fedora, factory=Make(checking=True))
add_builder('fedora30-x86_64', gerrit=False, nightly=True, env=env_fedora, factory=Make(checking=True))
add_builder('fedora30-x86_64-warnings', gerrit=False, nightly=True, worker='fedora30-x86_64', factory=Make(checking=False))

add_builder('gentoo-amd64', gerrit=False, nightly=True, factory=Make(checking=True))
add_builder('gentoo-gcc-amd64', gerrit=False, nightly=True, factory=Make(checking=True))

add_builder('irix', gerrit=None, nightly=True, worker='sgi_irix_65-64bit', env=env_irix,
    factory=Make(with_=[('krb5', '/usr/nekoware')], make=['gmake', 'dest']))
add_builder('linux-rc-x86_64', gerrit=False, nightly=True, worker='linux-rc-x86_64',
    factory=VirtRunBuild(linux='rc', test=True))
add_builder('linux-daily-x86_64', gerrit=False, nightly=True, worker='linux-rc-x86_64',
    factory=VirtRunBuild(linux='daily', test=True))
add_builder('macos10-12-x86_64', gerrit=False, nightly=True, env=env_macos,
    factory=Make(transarc=True, pam=False, make=['make', 'dest']))
add_builder('macos10-13-x86_64', gerrit=['master', 'openafs-stable-1_8_x'], nightly=['master', 'openafs-stable-1_8_x'],
    factory=Make(transarc=True, pam=False, make=['make', 'dest']))
add_builder('macos10-14-x86_64', gerrit=['master', 'openafs-stable-1_8_x'], nightly=['master', 'openafs-stable-1_8_x'],
    factory=Make(transarc=True, pam=False, make=['make', 'dest']))
add_builder('macos10-15-x86_64', gerrit=False, nightly=['master', 'openafs-stable-1_8_x'],
    factory=Make(transarc=True, pam=False, make=['make', 'dest']))
add_builder('opensuse-tumbleweed-i386', gerrit=False, nightly=True, env=env_suse)
add_builder('opensuse-tumbleweed-x86_64', gerrit=False, nightly=True, env=env_suse)
add_builder('opensuse12-x86_64', gerrit=False, nightly=True, env=env_suse)
add_builder('opensuse13-arm', gerrit=False, nightly=True)
add_builder('rhel6-x86_64', gerrit=False, nightly=True)
#add_builder('scan-build', gerrit=False, nightly=['master'],
#    factory=Make(debug=True, make=['scan-build', '-v', 'make', '-j', '4', 'all']))
add_builder('solaris10_x86', gerrit=False, nightly=True, worker='sun510_x86',
    factory=Make(transarc=True, make=['make', 'dest']))
add_builder('solaris11_x86', gerrit=True, nightly=True, worker='sun511_x86',
    factory=Make(transarc=True, make=['make', 'dest']))
add_builder('ubuntu14-x86_64', gerrit=['master', 'openafs-stable-1_8_x'], nightly=True)
add_builder('ubuntu1610-x86_64', gerrit=False, nightly=['master', 'openafs-stable-1_8_x'])
add_builder('ubuntu1804-amd64', gerrit=True, nightly=True, factory=Make(checking=True))

add_builder('win7_amd64_free', gerrit=['master', 'openafs-stable-1_8_x'], nightly=True,
            worker='win7-amd64', factory=WinBuild('amd64', 'free'))

add_builder('win7_amd64_checked', gerrit=False, nightly=True,
            worker='win7-amd64', factory=WinBuild('amd64', 'checked'))

add_builder('win7_x86_free', gerrit=False, nightly=True,
            worker='win7-amd64', factory=WinBuild('x86', 'free'))

add_builder('win7_x86_checked', gerrit=['master', 'openafs-stable-1_8_x'], nightly=True,
            worker='win7-amd64', factory=WinBuild('x86', 'checked'))

####### SCHEDULERS

c['schedulers'] = []

def scheduled(scheduler, branch):
    """Builder names assigned to given branch above."""
    builders = []
    for name,info in _builders.items():
        if branch in info[scheduler]:
            builders.append(name)
    return builders

def add_gerrit_scheduler(branch):
    if not branch in BRANCHES:
        raise ValueError('Unknown branch name: %s' % branch)
    c['schedulers'].append(schedulers.SingleBranchScheduler(
        name='gerrit-' + branch,
        change_filter=util.ChangeFilter(
            project='openafs',
            branch_re='^{0}/.*'.format(branch),
        ),
        treeStableTimer=None, # Schedule immediately to build all changes.
        builderNames=scheduled('gerrit', branch),
    ))

def add_nightly_scheduler(branch, hour, minute):
    if not branch in BRANCHES:
        raise ValueError('Unknown branch name: %s' % branch)
    c['schedulers'].append(schedulers.Nightly(
        name='nightly-' + branch,
        codebases={'':{'repository':REPO, 'branch':branch}},
        builderNames=scheduled('nightly', branch),
        hour=hour, minute=minute,
    ))

def add_force_scheduler(builder):
    workers = _builders[builder]['workers']
    c['schedulers'].append(schedulers.ForceScheduler(
        name='force-'+builder,
        buttonName='Force build',
        label='Force build '+builder,
        builderNames=[builder],
        reason=util.StringParameter(
            name='reason',
            label='Reason:',
            default='force build',
            required=True,
            size=80,
        ),
        codebases=[
            util.CodebaseParameter(
                '',
                label='Repository',
                # Generate just the branch entry in the form, but revision,
                # repository, and project are needed by buildbot scheduling
                # system so we need to pass an empty value ("") for those.
                # Note: branch value may be a gerrit change id branch.
                branch=util.StringParameter(
                    name='branch',
                    label='Branch:',
                    default='master',
                    required=True,
                    size=80,
                ),
                revision=util.FixedParameter(name="revision", default=""),
                repository=util.FixedParameter(name="repository", default=""),
                project=util.FixedParameter(name="project", default=""),
            ),
        ],
        properties=[
            util.WorkerChoiceParameter(
                label='Worker:',
                default=workers[0],
                choices=workers,
            ),
        ],
    ))


add_gerrit_scheduler('master')
add_gerrit_scheduler('openafs-stable-1_8_x')
add_gerrit_scheduler('openafs-stable-1_6_x')
add_nightly_scheduler('master', 0, 0)
add_nightly_scheduler('openafs-stable-1_8_x', 1, 0)
add_nightly_scheduler('openafs-stable-1_6_x', 2, 0)
for builder in _builders:
    add_force_scheduler(builder)

# Collect the builders by branches
builders_by_branch  = { _ : scheduled('gerrit', _)
                       for _ in ('master', 'openafs-stable-1_8_x', 'openafs-stable-1_6_x') }


c['schedulers'].append(ForceGerritBuild(
    gerritserver='gerrit.openafs.org',
    gerritport=29418,
    username='buildbot',
    identity_file=os.path.expanduser('~/.ssh/gerrit'),
    gerriturl="https://gerrit.openafs.org/#/c/%(changenumber)s/%(patchsetnumber)s",
    name='ForceGerritBuild',
    branchbuilders=builders_by_branch,
    reason=util.StringParameter(
        name='reason',
        label='Reason',
        default='ForceGerritBuild',
        required=True,
        size=80),
    codebases=[
        util.CodebaseParameter(
            '',
            branch=util.FixedParameter(name="branch", default=""),
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
        )
    ],
    properties=[
            util.StringParameter(
                name="changenumber",
                label="Gerrit Change#",
                default="", size=40, regex=r'^\d+$',
                required=True),
            util.StringParameter(
                name="patchsetnumber",
                label="Gerrit patchset# (defaults to latest)",
                default="", size=40, regex=r'^(\d*)$'),
    ]
))

####### BUILDBOT SERVICES

def gerrit_summary_callback(buildInfoList, results, status, arg):
    success = False
    failure = False
    msgs = ['The OpenAFS Buildbot Master', '']
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True
    message = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    return dict(message=message,
                labels={'Verified': verified})

# Email templates for nightly linux-rc builders.
body = '''\
The buildbot has detected a {{ status_detected }} on builder {{ buildername }} while building {{ (build['properties'].get('branch', ['unknown']))[0] }}

Build Reason: {{ build['properties'].get('reason', ["<unknown>"])[0] }}

{{ summary }}

Full details are available at:
    {{ build_url }}

The OpenAFS Buildbot,
{{ buildbot_url }}
'''

c['services'] = [
    reporters.GerritStatusPush(
        server='gerrit.openafs.org',
        username='buildbot',
        port=29418,
        identity_file=os.path.expanduser('~/.ssh/gerrit'),
        summaryCB=gerrit_summary_callback,
    ),
    reporters.MailNotifier(
        fromaddr='buildbot@openafs.MIT.EDU',
        builders=['linux-rc-x86_64'],
        mode=['failing', 'passing'],
        sendToInterestedUsers=False,
        extraRecipients=settings.get('mail', 'to', fallback='').split(),
        messageFormatter=reporters.MessageFormatter(
            template=body,
        ),
    ),
]

####### WEB UI

c['title'] = 'OpenAFS Buildbot'
c['titleURL'] = 'https://www.openafs.org/'
c['buildbotURL'] = settings.get('local', 'buildbotURL', fallback='https://buildbot.openafs.org/')

auth = util.UserPasswordAuth(settings.items('admins'))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role='admins'),
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=settings.options('admins'))
    ],
)

c['www'] = {
    'port': 8010,
    'auth': auth,
    'authz': authz,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {},
    },
}

####### DATA HORIZON

c['configurators'] = [
    # Delete all logs older than one month every Sunday at noon.
    util.JanitorConfigurator(
        logHorizon=datetime.timedelta(weeks=4),
        hour=12,
        dayOfWeek=6
    ),
]

####### DB URL

c['db'] = {'db_url' : 'sqlite:///state.sqlite'}

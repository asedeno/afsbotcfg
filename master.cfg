# -*- python -*-
# ex: set syntax=python:

# This is the OpenAFS buildbot config file for buildbot 0.8.x.
c = BuildmasterConfig = {}

####### BUILDSLAVES

c['slaves'] = []

# This custom slave class keeps the passwords in a git-ignored file.
from afsbotcfg import slave
reload(slave)
from afsbotcfg.slave import OpenAFSBuildSlave

# Contact: Chaz Chandler
c['slaves'].append(OpenAFSBuildSlave("sgi_irix_65-64bit", notify_on_missing="clc31@inbox.com"))

# Contact: Dave Botsch
c['slaves'].append(OpenAFSBuildSlave("rhel6-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("macos10-12-x86_64"))

# Contact: Derek Atkins
c['slaves'].append(OpenAFSBuildSlave("fedora20-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora21-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora22-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora23-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora24-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora25-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora26-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("fedora27-x86_64"))

# Contact: Christof Hanke
c['slaves'].append(OpenAFSBuildSlave("opensuse12-x86_64", notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse13-arm", notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse-tumbleweed-x86_64", notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse-tumbleweed-i386", notify_on_missing="christof.hanke@rzg.mpg.de"))

# contact: Ben Kaduk (OS),  Garrett Wollman (hardware admin)
c['slaves'].append(OpenAFSBuildSlave("ubuntu14-x86_64"))

# Contact: Garrett Wollman
c['slaves'].append(OpenAFSBuildSlave("freebsd100-i386"))

# Contact: Michael Meffie
c['slaves'].append(OpenAFSBuildSlave("sun510_x86"))
c['slaves'].append(OpenAFSBuildSlave("sun511_x86"))
c['slaves'].append(OpenAFSBuildSlave("centos73-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("ubuntu1610-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("linux-rc-x86_64", max_builds=1))
c['slaves'].append(OpenAFSBuildSlave("debian87-x86_64"))
c['slaves'].append(OpenAFSBuildSlave("centos7-arm64"))
c['slaves'].append(OpenAFSBuildSlave("debian9-amd64"))

# Contact: Nathan Hatley
c['slaves'].append(OpenAFSBuildSlave("debian8-amd64"))
c['slaves'].append(OpenAFSBuildSlave("debian8-i386"))

# Contact Alejandro R. Sedeno
c['slaves'].append(OpenAFSBuildSlave("win7-amd64", max_builds=4))

# The TCP port to listen on. This must match the value configured into the
# buildslaves (with their --master option)
c['slavePortnum'] = 9989

# Keep the last 1000 of any build, event or log file.
c['changeHorizon'] = 1000
c['buildHorizon'] = 1000
c['eventHorizon'] = 1000
c['logHorizon'] = 1000

####### CHANGESOURCES

# Listen for gerrit submissions.

from buildbot.changes.gerritchangesource import GerritChangeSource

c['change_source'] = []
c['change_source'].append(
    GerritChangeSource(
        gerritserver="localhost",
        username="buildbot",
        gerritport=22,
        identity_file="/home/buildbot/.ssh/id_rsa",
    )
)

####### SCHEDULERS

from buildbot.scheduler import Scheduler, Nightly
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.schedulers.forcesched import IntParameter
from buildbot.schedulers.forcesched import StringParameter

# Builder names lists for schedulers.
b = {}
b['all'] = [
    'centos73-x86_64-builder',
    'centos7-arm64-builder',
    'debian87-x86_64-builder',
    'debian8-amd64-builder',
    'debian8-i386-builder',
    'debian9-amd64-builder',
    'fedora20-x86_64-builder',
    'fedora21-x86_64-builder',
    'fedora22-x86_64-builder',
    'fedora23-x86_64-builder',
    'fedora24-x86_64-builder',
    'fedora25-x86_64-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
    #'freebsd100-i386-builder',
    'irix-builder',
    'linux-rc-x86_64-builder',
    'macos10-12-x86_64-builder',
    'opensuse12-x86_64-builder',
    'opensuse13-arm-builder',
    'opensuse-tumbleweed-i386-builder',
    'opensuse-tumbleweed-x86_64-builder',
    'rhel6-x86_64-builder',
    'solaris10_x86-builder',
    'solaris11_x86-builder',
    'ubuntu14-x86_64-builder',
    'ubuntu1610-x86_64-builder',
    'win7-amd64-checked-builder',
    'win7-amd64-free-builder',
    'win7-x86-checked-builder',
    'win7-x86-free-builder',
]
b['gerrit'] = [
    'opensuse12-x86_64-builder',
    'ubuntu14-x86_64-builder',
    'solaris10_x86-builder',
    'solaris11_x86-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
    'centos73-x86_64-builder',
    'win7-amd64-free-builder',
    'win7-amd64-checked-builder',
    'win7-x86-free-builder',
    'win7-x86-checked-builder',
]
b['gerrit-1.6.x'] = [
    'opensuse12-x86_64-builder',
    'solaris10_x86-builder',
    'solaris11_x86-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
    'centos73-x86_64-builder',
]
b['semidaily-master'] = [
    'rhel6-x86_64-builder',
    'opensuse13-arm-builder',
    'opensuse-tumbleweed-i386-builder',
    'opensuse-tumbleweed-x86_64-builder',
    'debian8-amd64-builder',
    'debian8-i386-builder',
    'debian9-amd64-builder',
    'macos10-12-x86_64-builder',
    'ubuntu1610-x86_64-builder',
    'debian87-x86_64-builder',
    #'freebsd100-i386-builder',
    'fedora20-x86_64-builder',
    'fedora21-x86_64-builder',
    'fedora22-x86_64-builder',
    'fedora23-x86_64-builder',
    'fedora24-x86_64-builder',
    'fedora25-x86_64-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
    'centos7-arm64-builder',
]
b['semidaily-1.8.x'] = [
    'rhel6-x86_64-builder',
    'opensuse13-arm-builder',
    'opensuse-tumbleweed-i386-builder',
    'opensuse-tumbleweed-x86_64-builder',
    'debian8-amd64-builder',
    'debian8-i386-builder',
    'debian9-amd64-builder',
    'macos10-12-x86_64-builder',
    'ubuntu1610-x86_64-builder',
    'debian87-x86_64-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
]
b['semidaily-1.6.x'] = [
    'irix-builder',
    'debian87-x86_64-builder',
    'debian9-amd64-builder',
    'fedora26-x86_64-builder',
    'fedora27-x86_64-builder',
]

c['schedulers'] = []
c['schedulers'].append(
    Scheduler(
        name="all",
        branch=None,
        treeStableTimer=30,
        properties={"settle":1},
        builderNames=b['all'],
    )
)
c['schedulers'].append(
    Nightly(
        branch="master",
        name='Daily',
        hour=[0, 12],
        minute=0,
        properties={"settle":1},
        builderNames=b['semidaily-master'],
    )
)
c['schedulers'].append(
    Nightly(
        name='Daily-1.8',
        hour=[4, 16],
        minute=0,
        properties={"settle":1},
        branch="openafs-stable-1_8_x",
        builderNames=b['semidaily-1.8.x'],
    )
)
c['schedulers'].append(
    Nightly(
        name='Daily-1.6',
        hour=[2, 14],
        minute=0,
        properties={"settle":1},
        branch="openafs-stable-1_6_x",
        builderNames=b['semidaily-1.6.x'],
    )
)
c['schedulers'].append(
    SingleBranchScheduler(
        name="gerrit_scheduler",
        change_filter=ChangeFilter(branch_re="^master/.*"),
        properties={"settle":120},
        builderNames=b['gerrit'],
    )
)
c['schedulers'].append(
    SingleBranchScheduler(
        name="gerrit_18_scheduler",
        change_filter=ChangeFilter(branch_re="^openafs-stable-1_8_x/.*"),
        properties={"settle":120},
        builderNames=b['gerrit'],
    )
)
c['schedulers'].append(
    SingleBranchScheduler(
        name="gerrit_16_scheduler",
        change_filter=ChangeFilter(branch_re="^openafs-stable-1_6_x/.*"),
        properties={"settle":120},
        builderNames=b['gerrit-1.6.x'],
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-rc-master',
        branch="master",
        hour=21,
        minute=0,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":""},
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-daily-master',
        branch="master",
        hour=21,
        minute=30,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":"daily/current"},
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-rc-1.8.x',
        branch="openafs-stable-1_8_x",
        hour=22,
        minute=0,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":""},
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-daily-1.8.x',
        branch="openafs-stable-1_8_x",
        hour=22,
        minute=30,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":"daily/current"},
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-rc-1.6.x',
        branch="openafs-stable-1_6_x",
        hour=23,
        minute=0,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":""},
    )
)
c['schedulers'].append(
    Nightly(
        name='linux-daily-1.6.x',
        branch="openafs-stable-1_6_x",
        hour=23,
        minute=30,
        builderNames=['linux-rc-x86_64-builder'],
        properties={"linux_kernel_ppa":"daily/current"},
    )
)
c['schedulers'].append(
    ForceScheduler(
        name="Force",
        reason=StringParameter(
            name="reason",
            label="reason for this build:<br/>",
            default="test build",
            required=True,
            size=64,
        ),
        branch=StringParameter(
            name="branch",
            label="branch:<br/>"\
                  "(e.g., master, openafs-stable-1_6_x, refs/changes/34/1234/1)<br/>",
            default="master",
            size=64,
        ),
        revision=FixedParameter(name="revision", default="", size=64),
        repository=FixedParameter(name="repository", default=""),
        project=FixedParameter(name="project", default=""),
        properties=[
            IntParameter(
                name="settle",
                label="settle delay (seconds):<br/>",
                default=1,
            ),
            StringParameter(
                name="linux_kernel_ppa",
                label="linux kernel ppa (default: most recent rc):<br/>",
                default="",
                size=64,
            ),
        ],
        builderNames=b['all'],
    )
)

####### BUILDERS

repourl="git://git.openafs.org/openafs.git"

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.gerrit import Gerrit
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.process.properties import Property
from buildbot.process.properties import WithProperties

c['builders'] = []
factory = {}


f = factory['irix'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"], timeout=3600))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-checking", "--enable-supergroups",
                             "--enable-namei-fileserver", "--with-krb5=/usr/nekoware",
                             "--enable-pthreaded-ubik"],
                    env={'CC':"cc"}))
f.addStep(Compile(command=["gmake"], warningPattern=".*cc:? WARNING"))
f.addStep(Compile(command=["make", "dest"], warningPattern=".*cc:? WARNING"))

c['builders'].append({
    'name': "irix-builder",
    'slavenames': ["sgi_irix_65-64bit"],
    'builddir': "irix-65-64bit-builder",
    'factory': factory['irix'],
})

####### linux builders

## generic linux factory
f = factory['linux'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-x", "-f", "-e", ".buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"], timeout=3600))
f.addStep(ShellCommand(command=["sh", "regen.sh"], timeout=3600))
f.addStep(Configure(command=["./configure", "--enable-checking", "--enable-supergroups",
                             "--enable-namei-fileserver", "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

######### rhel6 builder
f = factory['rhel6'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-x", "-f", "-d"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-supergroups", "--enable-namei-fileserver",
                             "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make", "-j4"]))
f.addStep(Compile(command=["make", "-j4", "dest"]))

c['builders'].append({
    'name': "rhel6-x86_64-builder",
    'slavename': "rhel6-x86_64",
    'builddir': "rhel6-x86_64-builder",
    'factory': factory['rhel6'],
})


######### fedora20 builder
f = factory['fedora20'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-x", "-f", "-e", ".buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-X", "-f"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-supergroups", "--enable-namei-fileserver", "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make", "-j4"]))
f.addStep(Compile(command=["make", "-j4", "dest"]))

c['builders'].append({
    'name': "fedora20-x86_64-builder",
    'slavename': "fedora20-x86_64",
    'builddir': "fedora20-x86_64-builder",
    'factory': factory['fedora20'],
})

######### fedora21 builder
f = factory['fedora21'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-x", "-f", "-e", ".buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-X", "-f"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-supergroups", "--enable-namei-fileserver",
                             "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make", "-j4"]))
f.addStep(Compile(command=["make", "-j4", "dest"]))

c['builders'].append({
    'name': "fedora21-x86_64-builder",
    'slavename': "fedora21-x86_64",
    'builddir': "fedora21-x86_64-builder",
    'factory': factory['fedora21'],
})

######### fedora builder
f = factory['fedora'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-x", "-f", "-e", ".buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "clean", "-d", "-X", "-f"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
#f.addStep(SetPropertyFromCommand(command=["uname", "-r"], property="uname_r"))
#f.addStep(ShellCommand(command=["rpm", "-q", "-a"]))
f.addStep(Configure(
    command=[
        "./configure",
        "--enable-supergroups",
        "--enable-namei-fileserver",
        "--enable-pthreaded-ubik",
        "--disable-kernel-module",
        "--with-afs-sysname=amd64_linux26",
    ],
    #env={'CFLAGS':'-Wno-error=format-truncation'},
  )
)

f.addStep(Compile(command=["make", "-j4"]))
f.addStep(Compile(command=["make", "-j4", "dest"]))

c['builders'].append({
    'name': "fedora22-x86_64-builder",
    'slavename': "fedora22-x86_64",
    'builddir': "fedora22-x86_64-builder",
    'factory': factory['fedora'],
})

######### fedora23 builder
c['builders'].append({
    'name': "fedora23-x86_64-builder",
    'slavename': "fedora23-x86_64",
    'builddir': "fedora23-x86_64-builder",
    'factory': factory['fedora'],
})

######### fedora24 builder
c['builders'].append({
    'name': "fedora24-x86_64-builder",
    'slavename': "fedora24-x86_64",
    'builddir': "fedora24-x86_64-builder",
    'factory': factory['fedora'],
})

######### fedora25 builder
c['builders'].append({
    'name': "fedora25-x86_64-builder",
    'slavename': "fedora25-x86_64",
    'builddir': "fedora25-x86_64-builder",
    'factory': factory['fedora'],
})

######### fedora26 builder
c['builders'].append({
    'name': "fedora26-x86_64-builder",
    'slavename': "fedora26-x86_64",
    'builddir': "fedora26-x86_64-builder",
    'factory': factory['fedora'],
})

######### fedora27 builder
c['builders'].append({
    'name': "fedora27-x86_64-builder",
    'slavename': "fedora27-x86_64",
    'builddir': "fedora27-x86_64-builder",
    'factory': factory['fedora'],
})

######### opensuse builder

f = factory['suse'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"], timeout=3600))
f.addStep(Configure(command=[
    "./configure", "--enable-checking", "--enable-supergroups",
    "--enable-namei-fileserver", "--enable-pthreaded-ubik",
    "--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

# suse tumbleweed
f = factory['suse-tumbleweed'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"], timeout=3600))
f.addStep(Configure(command=[
    "./configure", "--enable-checking", "--enable-supergroups",
    "--enable-namei-fileserver", "--enable-pthreaded-ubik",
    "--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default"],
    env={'CFLAGS':'-Wno-error=format-truncation'}))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

######### opensuse12 builder
c['builders'].append({
    'name': "opensuse12-x86_64-builder",
    'slavename': "opensuse12-x86_64",
    'builddir': "opensuse12-x86_64-builder",
    'factory': factory['suse'],
})

######### opensuse tumbleweed builder
c['builders'].append({
    'name': "opensuse-tumbleweed-i386-builder",
    'slavename': "opensuse-tumbleweed-i386",
    'builddir': "opensuse-tumbleweed-i386-builder",
    'factory': factory['suse-tumbleweed'],
})

c['builders'].append({
    'name': "opensuse-tumbleweed-x86_64-builder",
    'slavename': "opensuse-tumbleweed-x86_64",
    'builddir': "opensuse-tumbleweed-x86_64-builder",
    'factory': factory['suse-tumbleweed'],
})


######### opensuse13 arm builder
c['builders'].append({
    'name': "opensuse13-arm-builder",
    'slavename': "opensuse13-arm",
    'builddir': "opensuse13-arm-builder",
    'factory': factory['linux'],
})

######### mac builders
macintel_env = {
    'ARCHFLAGS':"-arch x86_64",
    'PATH':"/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin",
    "LD_LIBRARY_PATH":"/opt/local/lib"
}

f = factory['mac-intel'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600, env=macintel_env))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-d", "-e", "!.buildbot-sourcedata"], env=macintel_env))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"], env=macintel_env))
f.addStep(ShellCommand(command=["sh", "regen.sh"], timeout=3600, env=macintel_env))
f.addStep(Configure(command=["./configure", "--enable-transarc-paths", "--enable-pthreaded-ubik",
                             "--enable-warnings", "--disable-pam"],
                    env=macintel_env))
f.addStep(Compile(command=["make", "dest"], env=macintel_env))

# mac 10.12
c['builders'].append({
    'name': "macos10-12-x86_64-builder",
    'slavename': "macos10-12-x86_64",
    'builddir': "macos10-12-x86_64-builder",
    'factory': factory['mac-intel'],
})

######### debian builders
f = factory['debian'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode='full', method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["sh", "regen.sh"], timeout=3600))
f.addStep(Configure(command=["./configure", "--enable-supergroups",
                             "--enable-namei-fileserver", "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make", "-j5"]))
#f.addStep(Compile(command=["make", "-j5", "dest"]))

######### debian amd64 builder
c['builders'].append({
    'name': "debian8-amd64-builder",
    'slavename': "debian8-amd64",
    'builddir': "debian8-amd64-builder",
    'factory': factory['debian'],
})

######### debian i386 builder
c['builders'].append({
    'name': "debian8-i386-builder",
    'slavename': "debian8-i386",
    'builddir': "debian8-i386-builder",
    'factory': factory['debian'],
})

######### debian87 amd64 builder
c['builders'].append({
    'name': "debian87-x86_64-builder",
    'slavename': "debian87-x86_64",
    'builddir': "debian87-x86_64-builder",
    'factory': factory['debian'],
})

######### debian9 amd64 builder
c['builders'].append({
    'name': "debian9-amd64-builder",
    'slavename': "debian9-amd64",
    'builddir': "debian9-amd64-builder",
    'factory': factory['debian'],
})

######### ubuntu x86_64 builder
c['builders'].append({
    'name': "ubuntu14-x86_64-builder",
    'slavename': "ubuntu14-x86_64",
    'builddir': "ubuntu14-x86_64-builder",
    'factory': factory['linux'],
})

######### freebsd builders

f = factory['freebsd100'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-supergroups", "--enable-warnings",
                             "--enable-namei-fileserver", "--with-bsd-kernel-headers=/usr/src/sys",
                             "--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))
#c['builders'].append({
#    'name': "freebsd100-i386-builder",
#    'slavename': "freebsd100-i386",
#    'builddir': "freebsd100-i386-builder",
#    'factory': factory['freebsd100'],
#})

######### solaris 10 x86 builder
f = factory['solaris10_x86'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"], timeout=3600))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-debug", "--disable-optimize", "--enable-debug-kernel",
                             "--disable-optimize-kernel", "--enable-transarc-paths", "--enable-namei-fileserver"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

c['builders'].append({
    'name': "solaris10_x86-builder",
    'slavename': "sun510_x86",
    'builddir': "sun510_x86-builder",
    'factory': factory['solaris10_x86'],
})

######### solaris 11 x86 builder
f = factory['solaris11_x86'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-X", "-f", "-e", "!.buildbot-sourcedata"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"], timeout=3600))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-debug", "--disable-optimize", "--enable-debug-kernel", "--disable-optimize-kernel", "--enable-transarc-paths", "--enable-namei-fileserver", ]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

c['builders'].append({
    'name': "solaris11_x86-builder",
    'slavename': "sun511_x86",
    'builddir': "sun511_x86-builder",
    'factory': factory['solaris11_x86'],
})

######### centos 7.3 x86_64 builder
f = factory['centos73'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-x", "-f", "-d"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-checking", "--enable-transarc-paths",
                             "--enable-supergroups", "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

c['builders'].append({
    'name': "centos73-x86_64-builder",
    'slavename': "centos73-x86_64",
    'builddir': "centos73-x86_64-builder",
    'factory': factory['centos73'],
})

######### ubuntu 16.10 x86_64 builder
f = factory['ubuntu1610'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 3], timeout=3600))
f.addStep(ShellCommand(command=["git", "gc", "--auto"], timeout=3600))
f.addStep(ShellCommand(command=["git", "clean", "-x", "-f", "-d"]))
f.addStep(ShellCommand(command=["git", "log", "-n", "1", "--stat"]))
f.addStep(ShellCommand(command=["sh", "regen.sh"]))
f.addStep(Configure(command=["./configure", "--enable-checking", "--enable-transarc-paths",
                             "--enable-supergroups", "--enable-pthreaded-ubik"]))
f.addStep(Compile(command=["make"]))
f.addStep(Compile(command=["make", "dest"]))

c['builders'].append({
    'name': "ubuntu1610-x86_64-builder",
    'slavename': "ubuntu1610-x86_64",
    'builddir': "ubuntu1610-x86_64-builder",
    'factory': factory['ubuntu1610'],
})

######### linux rc x86_64 builder
# This builder will spin up a clean vm, install the most recent linux rc
# or daily from the Ubuntu kernel team, build openafs, and smoke test.
#
# kernel-ppa get daily/current -- daily linux build
# kernel-ppa get               -- current rc
#
f = factory['linux-rc'] = BuildFactory()
f.addStep(ShellCommand(command=["sleep", Property("settle", default=1)]))
f.addStep(ShellCommand(description="build", command=[
    "/usr/local/bin/virt-run",
    "--base", "ubuntu1610-builder",
    "--user", "buildbot",
    "sudo afsutil check --fix-hosts",
    WithProperties("kernel-ppa get %(linux_kernel_ppa:-)s"),
    "kernel-ppa install",
    "@reboot",
    "uname -a",
    "(mkdir openafs && cd openafs && git init)",
    WithProperties("(cd openafs && git fetch https://gerrit.openafs.org/openafs.git %(branch)s)"),
    "(cd openafs && git reset --hard FETCH_HEAD)",
    "(cd openafs && git --no-pager log -n1 --stat)",
    "afsutil build --chdir openafs",
    "afsrobot setup",
    "afsrobot test --suite client",
]))

c['builders'].append({
    'name': "linux-rc-x86_64-builder",
    'slavename': "linux-rc-x86_64",
    'builddir': "linux-rc-x86_64-builder",
    'factory': factory['linux-rc'],
})

###### win_amd64 free builder

f = factory['win_amd64_free'] = BuildFactory()
f.addStep(ShellCommand(command=["ping", "-n", Property("settle", default=1), "localhost"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(Compile(command=["build-openafs.cmd", "amd64", "free"]))

c['builders'].append({
    'name': "win7-amd64-free-builder",
    'slavename': "win7-amd64",
    'builddir': "win7-amd64-free-builder",
    'factory': factory['win_amd64_free'],
})

###### win_amd64 checked builder
f = factory['win_amd64_checked'] = BuildFactory()
f.addStep(ShellCommand(command=["ping", "-n", Property("settle", default=1), "localhost"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(Compile(command=["build-openafs.cmd", "amd64", "checked"]))

c['builders'].append({
    'name': "win7-amd64-checked-builder",
    'slavename': "win7-amd64",
    'builddir': "win7-amd64-checked-builder",
    'factory': factory['win_amd64_checked'],
})

###### win_x86 free builder
f = factory['win_x86_free'] = BuildFactory()
f.addStep(ShellCommand(command=["ping", "-n", Property("settle", default=1), "localhost"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(Compile(command=["build-openafs.cmd", "x86", "free"]))

c['builders'].append({
    'name': "win7-x86-free-builder",
    'slavename': "win7-amd64",
    'builddir': "win7-x86-free-builder",
    'factory': factory['win_x86_free'],
})

###### win_x86 checked builder
f = factory['win_x86_checked'] = BuildFactory()
f.addStep(ShellCommand(command=["ping", "-n", Property("settle", default=1), "localhost"]))
f.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60, 60], timeout=3600))
f.addStep(Compile(command=["build-openafs.cmd", "x86", "checked"]))

c['builders'].append({
    'name': "win7-x86-checked-builder",
    'slavename': "win7-amd64",
    'builddir': "win7-x86-checked-builder",
    'factory': factory['win_x86_checked'],
})


###### centos 7 arm64 builder

c['builders'].append({
    'name': "centos7-arm64-builder",
    'slavename': "centos7-arm64",
    'builddir': "centos7-arm64-builder",
    'factory': factory['linux'],
})

####### STATUS TARGETS

from buildbot.status.status_gerrit import GerritStatusPush
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
from buildbot.status.builder import SUCCESS
from buildbot.status.client import PBListener
from buildbot.status.mail import MailNotifier

def gerrit_summary_callback(buildInfoList, results, status, arg):
    success = False
    failure = False
    msgs = []
    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)
        if buildInfo['result'] == SUCCESS:
            success = True
        else:
            failure = True
    msg = '\n\n'.join(msgs)
    if success and not failure:
        verified = 1
    else:
        verified = 0
    reviewed = 0
    return (msg, verified, reviewed)

def mail_addresses(builder):
    addrs = []
    try:
        filename = '/home/buildbot/buildbot8/master/afsbotcfg/%s' % (builder)
        with open(filename, 'r') as f:
            for line in f.read().splitlines():
                line = line.strip()
                if line and not line.startswith('#'):
                    addrs.append(line)
    except:
        pass
    return addrs

c['status'] = []
c['status'].append(
    WebStatus(
        http_port=8010,
        authz=Authz(
            auth=HTPasswdAuth('/home/buildbot/buildbot8/master/htpasswd'),
            view=True,
            forceBuild='auth',
            forceAllBuilds='auth',
            pingBuilder=True,
            gracefulShutdown=False,
            pauseSlave=True,
            stopBuild=True,
            stopAllBuilds=True,
            cancelPendingBuild=True,
            cancelAllPendingBuilds=True,
            stopChange=True,
            cleanShutdown=False,
            showUsersPage=True,
        )
    )
)
c['status'].append(
    # Note: summaryCB is set and not reviewCB in order to get one gerrit update
    # once all builders finish, instead of one gerrit update for each builder.
    GerritStatusPush(
        "gerrit-prod",
        "buildbot",
        reviewCB=None,
        summaryCB=gerrit_summary_callback,
    )
)
c['status'].append(
    PBListener(9988)
)
c['status'].append(
    MailNotifier(
        fromaddr="buildbot@openafs.MIT.EDU",
        builders=["linux-rc-x86_64-builder"],
        mode=["failing", "passing"],
        sendToInterestedUsers=False,
        extraRecipients=mail_addresses('mail-linux-rc'),
    )
)

####### DEBUGGING OPTIONS


####### PROJECT IDENTITY

c['projectName'] = "OpenAFS"
c['projectURL'] = "http://www.openafs.org/"
c['buildbotURL'] = "http://buildbot.openafs.org:8010/"

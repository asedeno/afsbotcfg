# -*- python -*-
# ex: set syntax=python:

# load the special AFS buildslaves to handle password management
from afsbotcfg import slave
reload(slave)
from afsbotcfg.slave import OpenAFSBuildSlave

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

c['slaves'] = []

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave

# Contact: Chaz Chandler
c['slaves'].append(OpenAFSBuildSlave("sgi_irix_65-64bit", max_builds=2, notify_on_missing="clc31@inbox.com"))

# Contact: Dave Botsch
c['slaves'].append(OpenAFSBuildSlave("rhel6-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("macos10-12-x86_64", max_builds=2))

# Contact: Derek Atkins
c['slaves'].append(OpenAFSBuildSlave("fedora20-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora21-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora22-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora23-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora24-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora25-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora26-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("fedora27-x86_64", max_builds=2))

# Contact: Christof Hanke
c['slaves'].append(OpenAFSBuildSlave("opensuse12-x86_64", max_builds=2, notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse13-arm", max_builds=2, notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse-tumbleweed-x86_64", max_builds=2, notify_on_missing="christof.hanke@rzg.mpg.de"))
c['slaves'].append(OpenAFSBuildSlave("opensuse-tumbleweed-i386", max_builds=2, notify_on_missing="christof.hanke@rzg.mpg.de"))

# contact: Ben Kaduk (OS),  Garrett Wollman (hardware admin)
c['slaves'].append(OpenAFSBuildSlave("ubuntu14-x86_64", max_builds=2))

# Contact: Garrett Wollman
c['slaves'].append(OpenAFSBuildSlave("freebsd100-i386", max_builds=2))

# Contact: Michael Meffie
c['slaves'].append(OpenAFSBuildSlave("sun510_x86", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("sun511_x86", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("centos73-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("ubuntu1610-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("linux-rc-x86_64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("debian87-x86_64", max_builds=2))

# Contact: Nathan Hatley
c['slaves'].append(OpenAFSBuildSlave("debian8-amd64", max_builds=2))
c['slaves'].append(OpenAFSBuildSlave("debian8-i386", max_builds=2))

# Contact Alejandro R. Sedeno
c['slaves'].append(OpenAFSBuildSlave("win7-amd64", max_builds=4))

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

# only keep the last 1000 of any build, event or log file
c['changeHorizon'] = 1000
c['buildHorizon'] = 1000
c['eventHorizon'] = 1000
c['logHorizon'] = 1000

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.gerritchangesource import GerritChangeSource
c['change_source'] = []
#c['change_source'].append(GerritChangeSource(gerritserver="gerrit", username="buildbot", gerritport=22, identity_file="/home/buildbot/.ssh/id_dsa"))
c['change_source'].append(GerritChangeSource(gerritserver="localhost", username="buildbot", gerritport=22, identity_file="/home/buildbot/.ssh/id_rsa"))

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Periodic, Nightly
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes.filter import ChangeFilter

# gerrit-triggered builds for the 1.8.x and master branches.
gerrit_builders = []
gerrit_builders.append("opensuse12-x86_64-builder")
gerrit_builders.append("ubuntu14-x86_64-builder")
gerrit_builders.append("solaris10_x86-builder")
gerrit_builders.append("solaris11_x86-builder")
gerrit_builders.append("fedora26-x86_64-builder")
gerrit_builders.append("fedora27-x86_64-builder")
gerrit_builders.append("centos73-x86_64-builder")
gerrit_builders.append("win7-amd64-free-builder")
gerrit_builders.append("win7-amd64-checked-builder")
gerrit_builders.append("win7-x86-free-builder")
gerrit_builders.append("win7-x86-checked-builder")

devel17_builders = []

gerrit16_builders = []
gerrit16_builders.append("opensuse12-x86_64-builder")
#gerrit16_builders.append("ubuntu14-x86_64-builder")
gerrit16_builders.append("solaris10_x86-builder")
gerrit16_builders.append("solaris11_x86-builder")
gerrit16_builders.append("fedora26-x86_64-builder")
gerrit16_builders.append("fedora27-x86_64-builder")
gerrit16_builders.append("centos73-x86_64-builder")

# builders for 1.6 branches twice per day
semidaily_builders = []
semidaily_builders.append("irix-builder")
semidaily_builders.append("debian87-x86_64-builder")

# builders for the master daily builds
semidaily_master_builders = []
semidaily_master_builders.append("rhel6-x86_64-builder")
semidaily_master_builders.append("opensuse13-arm-builder")
semidaily_master_builders.append("opensuse-tumbleweed-i386-builder")
semidaily_master_builders.append("opensuse-tumbleweed-x86_64-builder")
semidaily_master_builders.append("debian8-amd64-builder")
semidaily_master_builders.append("debian8-i386-builder")
semidaily_master_builders.append("macos10-12-x86_64-builder")
semidaily_master_builders.append("ubuntu1610-x86_64-builder")
semidaily_master_builders.append("linux-rc-x86_64-builder")
semidaily_master_builders.append("linux-daily-x86_64-builder")
semidaily_master_builders.append("debian87-x86_64-builder")
semidaily_master_builders.append("freebsd100-i386-builder")
semidaily_master_builders.append("fedora20-x86_64-builder")
semidaily_master_builders.append("fedora21-x86_64-builder")
semidaily_master_builders.append("fedora22-x86_64-builder")
semidaily_master_builders.append("fedora23-x86_64-builder")
semidaily_master_builders.append("fedora24-x86_64-builder")
semidaily_master_builders.append("fedora25-x86_64-builder")

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch=None,
                                 treeStableTimer=30,
                                 builderNames=gerrit_builders,
                                 properties={"settle":1},
                                ))


c['schedulers'].append(Nightly(name='Daily', builderNames=semidaily_master_builders, hour=[0,12], minute=0, branch="master"))
c['schedulers'].append(Nightly(name='Daily-1.6', builderNames=semidaily_builders, hour=[2,14], minute=0, branch="openafs-stable-1_6_x" ))
c['schedulers'].append(Nightly(name='Daily-1.8', builderNames=semidaily_master_builders, hour=[4,16], minute=0, branch="openafs-stable-1_8_x" ))

# per-gerrit-change schedulers
c['schedulers'].append(SingleBranchScheduler(name="gerrit_scheduler",
                                             change_filter=ChangeFilter(branch_re="^master/.*"),
                                             builderNames=gerrit_builders,
                                             properties={"settle":120},
                                            ))
c['schedulers'].append(SingleBranchScheduler(name="gerrit_16_scheduler",
                                             change_filter=ChangeFilter(branch_re="^openafs-stable-1_6_x/.*"),
                                             builderNames=gerrit16_builders,
                                             properties={"settle":120},
                                            ))
c['schedulers'].append(SingleBranchScheduler(name="gerrit_18_scheduler",
                                             change_filter=ChangeFilter(branch_re="^openafs-stable-1_8_x/.*"),
                                             builderNames=gerrit_builders,
                                             properties={"settle":120},
                                            ))

# Configuration for 'force build' forms in the web ui.
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import BooleanParameter
from buildbot.schedulers.forcesched import ChoiceStringParameter
from buildbot.schedulers.forcesched import FixedParameter
from buildbot.schedulers.forcesched import StringParameter
from buildbot.schedulers.forcesched import UserNameParameter

c['schedulers'].append(
    ForceScheduler(
        name="force",
        branch=StringParameter(
            name="branch",
            label="ref<br/>examples: master, openafs-stable-1_6_x, " \
                  "refs/changes/34/1234/1, 929288217539bff04e5e6d58490b4aaa52fa9a25<br/>",
            default="master",
            size=64,
        ),
        revision=FixedParameter(name="revision", default="", size=64),
        repository=FixedParameter(name="repository", default=""),
        project=FixedParameter(name="project", default=""),
        properties=[
            FixedParameter(name="settle", default="1"),
        ],
        builderNames=[
             "centos73-x86_64-builder",
             "debian87-x86_64-builder",
             "debian8-amd64-builder",
             "debian8-i386-builder",
             "fedora20-x86_64-builder",
             "fedora21-x86_64-builder",
             "fedora22-x86_64-builder",
             "fedora23-x86_64-builder",
             "fedora24-x86_64-builder",
             "fedora25-x86_64-builder",
             "fedora26-x86_64-builder",
             "fedora27-x86_64-builder",
             "freebsd100-i386-builder",
             "irix-builder",
             "linux-daily-x86_64-builder",
             "linux-rc-x86_64-builder",
             "macos10-12-x86_64-builder",
             "opensuse12-x86_64-builder",
             "opensuse13-arm-builder",
             "opensuse-tumbleweed-i386-builder",
             "opensuse-tumbleweed-x86_64-builder",
             "rhel6-x86_64-builder",
             "solaris10_x86-builder",
             "solaris11_x86-builder",
             "ubuntu14-x86_64-builder",
             "ubuntu1610-x86_64-builder",
             "win7-amd64-checked-builder",
             "win7-amd64-free-builder",
             "win7-x86-checked-builder",
             "win7-x86-free-builder",
        ],
    )
)

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

repourl="git://git.openafs.org/openafs.git"

from buildbot.process import factory
from buildbot.steps.source.gerrit import Gerrit
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property

c['builders'] = []

irix_configure_env={'CC':"cc"}

irixfactory = factory.BuildFactory()
irixfactory.addStep(ShellCommand(command=["sleep",Property("settle")]))
irixfactory.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
irixfactory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
irixfactory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
irixfactory.addStep(ShellCommand(command=["git","log","-n","1","--stat"],timeout=3600))
irixfactory.addStep(ShellCommand(command=["sh","regen.sh"]))
irixfactory.addStep(Configure(command=["./configure","--enable-checking","--enable-supergroups","--enable-namei-fileserver","--with-krb5=/usr/nekoware","--enable-pthreaded-ubik"],env=irix_configure_env))
irixfactory.addStep(Compile(command=["gmake"], warningPattern=".*cc:? WARNING"))
irixfactory.addStep(Compile(command=["make","dest"], warningPattern=".*cc:? WARNING"))


irixbuilder = {'name': "irix-builder",
      'slavenames': ["sgi_irix_65-64bit"],
      'builddir': "irix-65-64bit-builder",
      'factory': irixfactory,
      }

c['builders'].append(irixbuilder)


####### linux builders

## generic linux factory
linuxfactory = factory.BuildFactory()
linuxfactory.addStep(ShellCommand(command=["sleep",Property("settle")]))
linuxfactory.addStep(ShellCommand(command=["git","clean","-d","-x","-f","-e",".buildbot-sourcedata"]))
linuxfactory.addStep(ShellCommand(command=["git","clean","-d","-X","-f","-e","!.buildbot-sourcedata"]))
linuxfactory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
linuxfactory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
linuxfactory.addStep(ShellCommand(command=["git","log","-n","1","--stat"],timeout=3600))
linuxfactory.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600))
linuxfactory.addStep(Configure(command=["./configure","--enable-checking","--enable-supergroups","--enable-namei-fileserver","--enable-pthreaded-ubik"]))
linuxfactory.addStep(Compile(command=["make"]))
linuxfactory.addStep(Compile(command=["make","dest"]))

######### rhel6 builder
rhel6factory = factory.BuildFactory()
rhel6factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
rhel6factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
rhel6factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
rhel6factory.addStep(ShellCommand(command=["git","clean","-x","-f","-d"]))
rhel6factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
rhel6factory.addStep(ShellCommand(command=["sh","regen.sh"]))
rhel6factory.addStep(Configure(command=["./configure","--enable-supergroups","--enable-namei-fileserver","--enable-pthreaded-ubik"]))
rhel6factory.addStep(Compile(command=["make","-j4"]))
rhel6factory.addStep(Compile(command=["make","-j4","dest"]))

rhel6_x86_builder = {'name': "rhel6-x86_64-builder",
      'slavename': "rhel6-x86_64",
      'builddir': "rhel6-x86_64-builder",
      'factory': rhel6factory,
      }

c['builders'].append(rhel6_x86_builder)


######### fedora20 builder
fedora20factory = factory.BuildFactory()
fedora20factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
fedora20factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
fedora20factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
# clean all files except ignored, don't remove .buildbot-sourcedata
fedora20factory.addStep(ShellCommand(command=["git","clean","-d","-x","-f","-e",".buildbot-sourcedata"]))
# clean all ignored files, don't remove .buildbot-sourcedata
fedora20factory.addStep(ShellCommand(command=["git","clean","-d","-X","-f"]))
fedora20factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
fedora20factory.addStep(ShellCommand(command=["sh","regen.sh"]))
fedora20factory.addStep(Configure(command=["./configure","--enable-supergroups","--enable-namei-fileserver","--enable-pthreaded-ubik"]))
fedora20factory.addStep(Compile(command=["make","-j4"]))
fedora20factory.addStep(Compile(command=["make","-j4","dest"]))

fedora20_x86_builder = {'name': "fedora20-x86_64-builder",
      'slavename': "fedora20-x86_64",
      'builddir': "fedora20-x86_64-builder",
      'factory': fedora20factory,
      }

c['builders'].append(fedora20_x86_builder)


######### fedora21 builder
fedora21factory = factory.BuildFactory()
fedora21factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
fedora21factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
fedora21factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
# clean all files except ignored, don't remove .buildbot-sourcedata
fedora21factory.addStep(ShellCommand(command=["git","clean","-d","-x","-f","-e",".buildbot-sourcedata"]))
# clean all ignored files, don't remove .buildbot-sourcedata
fedora21factory.addStep(ShellCommand(command=["git","clean","-d","-X","-f"]))
fedora21factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
fedora21factory.addStep(ShellCommand(command=["sh","regen.sh"]))
fedora21factory.addStep(Configure(command=["./configure","--enable-supergroups","--enable-namei-fileserver","--enable-pthreaded-ubik"]))
fedora21factory.addStep(Compile(command=["make","-j4"]))
fedora21factory.addStep(Compile(command=["make","-j4","dest"]))

fedora21_x86_builder = {'name': "fedora21-x86_64-builder",
      'slavename': "fedora21-x86_64",
      'builddir': "fedora21-x86_64-builder",
      'factory': fedora21factory,
      }

c['builders'].append(fedora21_x86_builder)


######### fedora22 builder
fedorafactory = factory.BuildFactory()
fedorafactory.addStep(ShellCommand(command=["sleep",Property("settle")]))
fedorafactory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
fedorafactory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
# clean all files except ignored, don't remove .buildbot-sourcedata
fedorafactory.addStep(ShellCommand(command=["git","clean","-d","-x","-f","-e",".buildbot-sourcedata"]))
# clean all ignored files, don't remove .buildbot-sourcedata
fedorafactory.addStep(ShellCommand(command=["git","clean","-d","-X","-f"]))
fedorafactory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
fedorafactory.addStep(ShellCommand(command=["sh","regen.sh"]))
fedorafactory.addStep(Configure(command=[
    "./configure","--enable-supergroups","--enable-namei-fileserver",
    "--enable-pthreaded-ubik","--disable-kernel-module", "--with-afs-sysname=amd64_linux26"]))
fedorafactory.addStep(Compile(command=["make","-j4"]))
fedorafactory.addStep(Compile(command=["make","-j4","dest"]))

fedora22_x86_builder = {'name': "fedora22-x86_64-builder",
      'slavename': "fedora22-x86_64",
      'builddir': "fedora22-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora22_x86_builder)

######### fedora23 builder
fedora23_x86_builder = {'name': "fedora23-x86_64-builder",
      'slavename': "fedora23-x86_64",
      'builddir': "fedora23-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora23_x86_builder)

######### fedora24 builder
fedora24_x86_builder = {'name': "fedora24-x86_64-builder",
      'slavename': "fedora24-x86_64",
      'builddir': "fedora24-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora24_x86_builder)

######### fedora25 builder
fedora25_x86_builder = {'name': "fedora25-x86_64-builder",
      'slavename': "fedora25-x86_64",
      'builddir': "fedora25-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora25_x86_builder)

######### fedora26 builder
fedora26_x86_builder = {'name': "fedora26-x86_64-builder",
      'slavename': "fedora26-x86_64",
      'builddir': "fedora26-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora26_x86_builder)

######### fedora27 builder
fedora27_x86_builder = {'name': "fedora27-x86_64-builder",
      'slavename': "fedora27-x86_64",
      'builddir': "fedora27-x86_64-builder",
      'factory': fedorafactory,
      }
c['builders'].append(fedora27_x86_builder)


######### opensuse builder
# i386

susefactory86 = factory.BuildFactory()
susefactory86.addStep(ShellCommand(command=["sleep",Property("settle")]))
susefactory86.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
susefactory86.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
susefactory86.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
susefactory86.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
susefactory86.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600))
susefactory86.addStep(Configure(command=[
    "./configure","--enable-checking","--enable-supergroups",
    "--enable-namei-fileserver","--enable-pthreaded-ubik",
    "--with-linux-kernel-build=/usr/src/linux-obj/i586/default"]))
susefactory86.addStep(Compile(command=["make","-j4"]))
susefactory86.addStep(Compile(command=["make","-j4","dest"]))

# x86_64
susefactory64 = factory.BuildFactory()
susefactory64.addStep(ShellCommand(command=["sleep",Property("settle")]))
susefactory64.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
susefactory64.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
susefactory64.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
susefactory64.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
susefactory64.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600))
susefactory64.addStep(Configure(command=[
    "./configure","--enable-checking","--enable-supergroups",
    "--enable-namei-fileserver","--enable-pthreaded-ubik",
    "--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default"]))
susefactory64.addStep(Compile(command=["make"]))
susefactory64.addStep(Compile(command=["make","dest"]))

# suse tumbleweed
suse_tumbleweed_factory = factory.BuildFactory()
suse_tumbleweed_factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
suse_tumbleweed_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
suse_tumbleweed_factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
suse_tumbleweed_factory.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
suse_tumbleweed_factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
suse_tumbleweed_factory.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600))
suse_tumbleweed_factory.addStep(Configure(command=[
    "./configure","--enable-checking","--enable-supergroups",
    "--enable-namei-fileserver","--enable-pthreaded-ubik",
    "--with-linux-kernel-build=/usr/src/linux-obj/x86_64/default"],
    env={'CFLAGS':'-Wno-error=format-truncation'}))
suse_tumbleweed_factory.addStep(Compile(command=["make"]))
suse_tumbleweed_factory.addStep(Compile(command=["make","dest"]))

######### opensuse12 builder
opensuse12_64bit_builder = {'name': "opensuse12-x86_64-builder",
      'slavename': "opensuse12-x86_64",
      'builddir': "opensuse12-x86_64-builder",
      'factory': susefactory64,
      }

c['builders'].append(opensuse12_64bit_builder)

######### opensuse tumbleweed builder
opensuse_tumbleweed_x86_builder = {'name': "opensuse-tumbleweed-i386-builder",
      'slavename': "opensuse-tumbleweed-i386",
      'builddir': "opensuse-tumbleweed-i386-builder",
      'factory': suse_tumbleweed_factory,
      }

c['builders'].append(opensuse_tumbleweed_x86_builder)

opensuse_tumbleweed_64bit_builder = {'name': "opensuse-tumbleweed-x86_64-builder",
      'slavename': "opensuse-tumbleweed-x86_64",
      'builddir': "opensuse-tumbleweed-x86_64-builder",
      'factory': suse_tumbleweed_factory,
      }

c['builders'].append(opensuse_tumbleweed_64bit_builder)

######### opensuse13 arm builder
opensuse13_arm_builder = {'name': "opensuse13-arm-builder",
      'slavename': "opensuse13-arm",
      'builddir': "opensuse13-arm-builder",
      'factory': linuxfactory,
      }

c['builders'].append(opensuse13_arm_builder)

######### mac builders
macintel_env={'ARCHFLAGS':"-arch x86_64", 'PATH':"/usr/local/git/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin" , "LD_LIBRARY_PATH":"/opt/local/lib"}

macintelfactory = factory.BuildFactory()
macintelfactory.addStep(ShellCommand(command=["sleep",Property("settle")]))
macintelfactory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
macintelfactory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600,env=macintel_env))
macintelfactory.addStep(ShellCommand(command=["git","clean","-X","-f","-d","-e","!.buildbot-sourcedata"],env=macintel_env))
macintelfactory.addStep(ShellCommand(command=["git","log","-n", "1","--stat"],env=macintel_env))
macintelfactory.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600,env=macintel_env))
# --enable-checking has been temporarily disabled until the deprecated syscall() is no longer used.
macintelfactory.addStep(Configure(command=["./configure","--enable-transarc-paths","--enable-pthreaded-ubik","--enable-warnings","--disable-pam"], env=macintel_env))
macintelfactory.addStep(Compile(command=["make","dest"],env=macintel_env))

# mac 10.12
macintel10_12_builder = {'name': "macos10-12-x86_64-builder",
      'slavename': "macos10-12-x86_64",
      'builddir': "macos10-12-x86_64-builder",
      'factory': macintelfactory,
      }

c['builders'].append(macintel10_12_builder)

######### debian 8 builders
debian8factory = factory.BuildFactory()
debian8factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
debian8factory.addStep(Gerrit(repourl=repourl, mode='full', method="fresh", retry=[60,3], timeout=3600))
debian8factory.addStep(ShellCommand(command=["sh","regen.sh"],timeout=3600))
debian8factory.addStep(Configure(command=["./configure","--enable-supergroups","--enable-namei-fileserver","--enable-pthreaded-ubik"]))
debian8factory.addStep(Compile(command=["make","-j5"]))
debian8factory.addStep(Compile(command=["make","-j5","dest"]))

######### debian amd64 builder
debian8_amd64_builder = {'name': "debian8-amd64-builder",
      'slavename': "debian8-amd64",
      'builddir': "debian8-amd64-builder",
      'factory': debian8factory,
      }

c['builders'].append(debian8_amd64_builder)

######### debian i386 builder
debian8_i386_builder = {'name': "debian8-i386-builder",
      'slavename': "debian8-i386",
      'builddir': "debian8-i386-builder",
      'factory': debian8factory,
      }

c['builders'].append(debian8_i386_builder)

######### debian87 amd64 builder
debian87_x86_64_builder = {'name': "debian87-x86_64-builder",
      'slavename': "debian87-x86_64",
      'builddir': "debian87-x86_64-builder",
      'factory': debian8factory,
      }

c['builders'].append(debian87_x86_64_builder)

######### ubunu x86_64 builder
ubuntu14_64bit_builder = {'name': "ubuntu14-x86_64-builder",
      'slavename': "ubuntu14-x86_64",
      'builddir': "ubuntu14-x86_64-builder",
      'factory': linuxfactory,
      }

c['builders'].append(ubuntu14_64bit_builder)

######### freebsd builders

freebsd100factory = factory.BuildFactory()
freebsd100factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
freebsd100factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
freebsd100factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
freebsd100factory.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
freebsd100factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
freebsd100factory.addStep(ShellCommand(command=["sh","regen.sh"]))
freebsd100factory.addStep(Configure(command=["./configure","--enable-supergroups","--enable-warnings","--enable-namei-fileserver","--with-bsd-kernel-headers=/usr/src/sys","--with-bsd-kernel-build=/usr/obj/usr/src/sys/GENERIC"]))
freebsd100factory.addStep(Compile(command=["make"]))
freebsd100factory.addStep(Compile(command=["make", "dest"]))

freebsd100_i386_builder = {'name': "freebsd100-i386-builder",
      'slavename': "freebsd100-i386",
      'builddir': "freebsd100-i386-builder",
      'factory': freebsd100factory,
      }

c['builders'].append(freebsd100_i386_builder)


######### solaris 10 x86 builder
solaris10_x86_factory = factory.BuildFactory()
solaris10_x86_factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
solaris10_x86_factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
solaris10_x86_factory.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
solaris10_x86_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
solaris10_x86_factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
solaris10_x86_factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"],timeout=3600))
solaris10_x86_factory.addStep(ShellCommand(command=["sh","regen.sh"]))
solaris10_x86_factory.addStep(Configure(command=["./configure","--enable-debug","--disable-optimize","--enable-debug-kernel","--disable-optimize-kernel","--enable-transarc-paths","--enable-namei-fileserver",]))
solaris10_x86_factory.addStep(Compile(command=["make"]))
solaris10_x86_factory.addStep(Compile(command=["make", "dest"]))

solaris10_x86_builder = {'name': "solaris10_x86-builder",
      'slavename': "sun510_x86",
      'builddir': "sun510_x86-builder",
      'factory': solaris10_x86_factory,
      }

c['builders'].append(solaris10_x86_builder)


######### solaris 11 x86 builder
solaris11_x86_factory = factory.BuildFactory()
solaris11_x86_factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
solaris11_x86_factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
solaris11_x86_factory.addStep(ShellCommand(command=["git","clean","-X","-f","-e","!.buildbot-sourcedata"]))
solaris11_x86_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
solaris11_x86_factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
solaris11_x86_factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"],timeout=3600))
solaris11_x86_factory.addStep(ShellCommand(command=["sh","regen.sh"]))
solaris11_x86_factory.addStep(Configure(command=["./configure","--enable-debug","--disable-optimize","--enable-debug-kernel","--disable-optimize-kernel","--enable-transarc-paths","--enable-namei-fileserver",]))
solaris11_x86_factory.addStep(Compile(command=["make"]))
solaris11_x86_factory.addStep(Compile(command=["make", "dest"]))

solaris11_x86_builder = {'name': "solaris11_x86-builder",
      'slavename': "sun511_x86",
      'builddir': "sun511_x86-builder",
      'factory': solaris11_x86_factory,
      }

c['builders'].append(solaris11_x86_builder)

######### centos 7.3 x86_64 builder
centos73factory = factory.BuildFactory()
centos73factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
centos73factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
centos73factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
centos73factory.addStep(ShellCommand(command=["git","clean","-x","-f","-d"]))
centos73factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
centos73factory.addStep(ShellCommand(command=["sh","regen.sh"]))
centos73factory.addStep(Configure(command=["./configure","--enable-checking","--enable-transarc-paths","--enable-supergroups","--enable-pthreaded-ubik"]))
centos73factory.addStep(Compile(command=["make"]))
centos73factory.addStep(Compile(command=["make","dest"]))

centos73_x86_64_builder = {'name': "centos73-x86_64-builder",
      'slavename': "centos73-x86_64",
      'builddir': "centos73-x86_64-builder",
      'factory': centos73factory,
      }

c['builders'].append(centos73_x86_64_builder)

######### ubuntu 16.10 x86_64 builder
ubuntu1610factory = factory.BuildFactory()
ubuntu1610factory.addStep(ShellCommand(command=["sleep",Property("settle")]))
ubuntu1610factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,3],timeout=3600))
ubuntu1610factory.addStep(ShellCommand(command=["git","gc","--auto"],timeout=3600))
ubuntu1610factory.addStep(ShellCommand(command=["git","clean","-x","-f","-d"]))
ubuntu1610factory.addStep(ShellCommand(command=["git","log","-n","1","--stat"]))
ubuntu1610factory.addStep(ShellCommand(command=["sh","regen.sh"]))
ubuntu1610factory.addStep(Configure(command=["./configure","--enable-checking","--enable-transarc-paths","--enable-supergroups","--enable-pthreaded-ubik"]))
ubuntu1610factory.addStep(Compile(command=["make"]))
ubuntu1610factory.addStep(Compile(command=["make","dest"]))

ubuntu1610_x86_64_builder = {'name': "ubuntu1610-x86_64-builder",
      'slavename': "ubuntu1610-x86_64",
      'builddir': "ubuntu1610-x86_64-builder",
      'factory': ubuntu1610factory,
      }

c['builders'].append(ubuntu1610_x86_64_builder)

######### linux rc x86_64 builder
# This builder will spin up a clean vm, install the most recent linux rc,
# and run a build and smoke test.
from buildbot.process.properties import WithProperties

linuxrc_factory = factory.BuildFactory()
linuxrc_factory.addStep(ShellCommand(command=["sleep", Property("settle")]))
linuxrc_factory.addStep(ShellCommand(description="build", command=[
    "/usr/local/bin/virt-run",
    "--base", "ubuntu1610-builder",
    "--user", "buildbot",
    "sudo afsutil check --fix-hosts",
    "kernel-ppa get",
    "kernel-ppa install",
    "@reboot",
    "uname -a",
    WithProperties("git clone -b %(branch)s https://gerrit.openafs.org/openafs openafs"),
    "git --no-pager --git-dir=openafs/.git log -n1 --stat",
    "afsutil build --chdir openafs",
    "afsrobot setup",
    "afsrobot test --suite client",
]))

linux_rc_x86_64_builder = {'name': "linux-rc-x86_64-builder",
      'slavename': "linux-rc-x86_64",
      'builddir': "linux-rc-x86_64-builder",
      'factory': linuxrc_factory,
      }

c['builders'].append(linux_rc_x86_64_builder)

######### linux daily x86_64 builder
# This builder will spin up a clean vm, install the most recent linux daily,
# from the Ubuntu kernel team, build openafs, and smoke test.

linuxdaily_factory = factory.BuildFactory()
linuxdaily_factory.addStep(ShellCommand(command=["sleep", Property("settle")]))
linuxdaily_factory.addStep(ShellCommand(description="build", command=[
    "/usr/local/bin/virt-run",
    "--base", "ubuntu1610-builder",
    "--user", "buildbot",
    "sudo afsutil check --fix-hosts",
    "kernel-ppa get daily/current",
    "kernel-ppa install",
    "@reboot",
    "uname -a",
    WithProperties("git clone -b %(branch)s https://gerrit.openafs.org/openafs openafs"),
    "git --no-pager --git-dir=openafs/.git log -n1 --stat",
    "afsutil build --chdir openafs",
    "afsrobot setup",
    "afsrobot test --suite client",
]))

linux_daily_x86_64_builder = {'name': "linux-daily-x86_64-builder",
      'slavename': "linux-rc-x86_64",
      'builddir': "linux-daily-x86_64-builder",
      'factory': linuxdaily_factory,
      }

c['builders'].append(linux_daily_x86_64_builder)

###### win_amd64 free builder

win_amd64_free_factory = factory.BuildFactory()

# wait for 2 minutes for gerrit changes settle
win_amd64_free_factory.addStep(ShellCommand(command=["ping","-n",Property("settle"),"localhost"]))
win_amd64_free_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
win_amd64_free_factory.addStep(Compile(command=["build-openafs.cmd", "amd64", "free"]))

win_amd64_free_builder = {'name': "win7-amd64-free-builder",
      'slavename': "win7-amd64",
      'builddir': "win7-amd64-free-builder",
      'factory': win_amd64_free_factory,
      }
c['builders'].append(win_amd64_free_builder)


###### win_amd64 checked builder
win_amd64_checked_factory = factory.BuildFactory()

# wait for 2 minutes for gerrit changes settle
win_amd64_checked_factory.addStep(ShellCommand(command=["ping","-n",Property("settle"),"localhost"]))
win_amd64_checked_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
win_amd64_checked_factory.addStep(Compile(command=["build-openafs.cmd", "amd64", "checked"]))

win_amd64_checked_builder = {'name': "win7-amd64-checked-builder",
      'slavename': "win7-amd64",
      'builddir': "win7-amd64-checked-builder",
      'factory': win_amd64_checked_factory,
      }
c['builders'].append(win_amd64_checked_builder)


###### win_x86 free builder
win_x86_free_factory = factory.BuildFactory()

# wait for 2 minutes for gerrit changes settle
win_x86_free_factory.addStep(ShellCommand(command=["ping","-n",Property("settle"),"localhost"]))
win_x86_free_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
win_x86_free_factory.addStep(Compile(command=["build-openafs.cmd", "x86", "free"]))

win_x86_free_builder = {'name': "win7-x86-free-builder",
      'slavename': "win7-amd64",
      'builddir': "win7-x86-free-builder",
      'factory': win_x86_free_factory,
      }
c['builders'].append(win_x86_free_builder)


###### win_x86 checked builder
win_x86_checked_factory = factory.BuildFactory()

# wait for 2 minutes for gerrit changes settle
win_x86_checked_factory.addStep(ShellCommand(command=["ping","-n",Property("settle"),"localhost"]))
win_x86_checked_factory.addStep(Gerrit(repourl=repourl, mode="full", method="fresh", retry=[60,60],timeout=3600))
win_x86_checked_factory.addStep(Compile(command=["build-openafs.cmd", "x86", "checked"]))

win_x86_checked_builder = {'name': "win7-x86-checked-builder",
      'slavename': "win7-amd64",
      'builddir': "win7-x86-checked-builder",
      'factory': win_x86_checked_factory,
      }
c['builders'].append(win_x86_checked_builder)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, status_gerrit
from buildbot.status.status_gerrit import GerritStatusPush


from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

authz = Authz(
    auth=HTPasswdAuth('/home/buildbot/buildbot8/master/htpasswd'),
    view=True,
    forceBuild='auth',
    forceAllBuilds='auth',
    pingBuilder=True,
    gracefulShutdown=False,
    pauseSlave=True,
    stopBuild=True,
    stopAllBuilds=True,
    cancelPendingBuild=True,
    cancelAllPendingBuilds=True,
    stopChange=True,
    cleanShutdown=False,
    showUsersPage=True)
c['status'].append(html.WebStatus(http_port=8010, authz=authz))

from buildbot.status.builder import Results, SUCCESS, RETRY

def gerritSummaryCB(buildInfoList, results, status, arg):
    success = False
    failure = False

    msgs = []

    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."
        msgs.append(msg)

        if buildInfo['result'] == SUCCESS:
            success = True
        else:
            failure = True

    msg = '\n\n'.join(msgs)

    if success and not failure:
        verified = 1
    else:
        verified = 0

    reviewed = 0
    return (msg, verified, reviewed)



# Set summaryCB and not reviewCB in order to get one gerrit update once all
# builders finish, and not one gerrit update for each builder.
c['status'].append(status_gerrit.GerritStatusPush("gerrit-prod",
                                                  "buildbot",
                                                  reviewCB=None,
                                                  summaryCB=gerritSummaryCB))


#from buildbot.status import html
#c['status'].append(html.WebStatus(http_port=8010))

#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
from buildbot.status import client
c['status'].append(client.PBListener(9988))


from buildbot.status.mail import MailNotifier

def mail_addrs(name):
    addrs = []
    try:
        import os
        filename = os.path.join('/home/buildbot/buildbot8/master/afsbotcfg', name)
        with open(filename, 'r') as f:
            for line in f.read().splitlines():
                line = line.strip()
                if line and not line.startswith('#'):
                    addrs.append(line)
    except:
        pass
    return addrs

c['status'].append(MailNotifier(
    fromaddr="buildbot@openafs.MIT.EDU",
    builders=[
        "linux-rc-x86_64-builder",
        "linux-daily-x86_64-builder",
    ],
    mode=["failing","passing"],
    sendToInterestedUsers=False,
    extraRecipients=mail_addrs('mail-linux-rc'),
    ))

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "OpenAFS"
c['projectURL'] = "http://www.openafs.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.openafs.org:8010/"
